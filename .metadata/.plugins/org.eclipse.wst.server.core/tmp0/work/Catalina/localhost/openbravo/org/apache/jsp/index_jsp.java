/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.78
 * Generated at: 2022-05-27 19:30:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Properties;
import org.openbravo.base.HttpBaseServlet;
import org.openbravo.dal.core.OBContext;
import org.openbravo.base.util.OBClassLoader;
import org.openbravo.base.weld.WeldUtils;
import org.openbravo.authentication.AuthenticationManager;
import org.openbravo.client.kernel.KernelUtils;
import org.openbravo.client.kernel.KernelConstants;
import org.openbravo.client.kernel.StaticResourceProvider;
import org.openbravo.dal.core.OBContext;
import org.openbravo.model.ad.module.Module;
import org.apache.log4j.Logger;
import org.openbravo.model.ad.access.Role;
import org.openbravo.model.ad.access.User;
import org.openbravo.dal.service.OBDal;
import org.openbravo.base.secureApp.VariablesSecureApp;
import org.openbravo.erpCommon.obps.ActivationKey;
import org.openbravo.base.secureApp.LoginHandler;
import org.openbravo.base.HttpBaseUtils;
import org.openbravo.erpCommon.utility.OBMessageUtils;
import org.openbravo.erpCommon.utility.OBError;
import java.util.Date;
import org.openbravo.erpCommon.obps.ActivationKey.LicenseRestriction;
import org.openbravo.client.application.window.ApplicationDictionaryCachedStructures;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.openbravo.client.kernel.StaticResourceProvider");
    _jspx_imports_classes.add("org.openbravo.erpCommon.utility.OBError");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("org.openbravo.client.application.window.ApplicationDictionaryCachedStructures");
    _jspx_imports_classes.add("org.openbravo.authentication.AuthenticationManager");
    _jspx_imports_classes.add("org.openbravo.erpCommon.obps.ActivationKey.LicenseRestriction");
    _jspx_imports_classes.add("org.openbravo.base.HttpBaseServlet");
    _jspx_imports_classes.add("org.openbravo.base.util.OBClassLoader");
    _jspx_imports_classes.add("org.openbravo.base.secureApp.VariablesSecureApp");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.openbravo.dal.service.OBDal");
    _jspx_imports_classes.add("org.openbravo.model.ad.access.User");
    _jspx_imports_classes.add("org.openbravo.client.kernel.KernelUtils");
    _jspx_imports_classes.add("org.openbravo.dal.core.OBContext");
    _jspx_imports_classes.add("org.openbravo.base.secureApp.LoginHandler");
    _jspx_imports_classes.add("org.apache.log4j.Logger");
    _jspx_imports_classes.add("org.openbravo.erpCommon.utility.OBMessageUtils");
    _jspx_imports_classes.add("org.openbravo.base.weld.WeldUtils");
    _jspx_imports_classes.add("org.openbravo.client.kernel.KernelConstants");
    _jspx_imports_classes.add("org.openbravo.model.ad.module.Module");
    _jspx_imports_classes.add("org.openbravo.erpCommon.obps.ActivationKey");
    _jspx_imports_classes.add("org.openbravo.base.HttpBaseUtils");
    _jspx_imports_classes.add("org.openbravo.model.ad.access.Role");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

  /*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html 
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License. 
 * The Original Code is Openbravo ERP. 
 * The Initial Developer of the Original Code is Openbravo SLU 
 * All portions are Copyright (C) 2011-2017 Openbravo SLU
 * All Rights Reserved. 
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

Logger log = Logger.getLogger(org.openbravo.authentication.AuthenticationManager.class); 

HttpSession currentSession = request.getSession(false);

AuthenticationManager authManager = AuthenticationManager.getAuthenticationManager(this);
if (currentSession == null) {
  response.sendRedirect(authManager.getLoginURL(request));
  return;
}

String userId = authManager.authenticate(request, response);

if (userId == null) {
  return;
}

OBContext.setAdminMode(false);
String sessionId = null;
try {
  sessionId = (String) currentSession.getAttribute("#AD_SESSION_ID");
  if (sessionId != null && !"".equals(sessionId) && !"Y".equals(currentSession.getAttribute("forceLogin"))) {
    org.openbravo.model.ad.access.Session dbSession = OBDal.getInstance().get(org.openbravo.model.ad.access.Session.class, sessionId);
    String currentSessionType = dbSession.getLoginStatus();

    if (!ActivationKey.consumesConcurrentUser(currentSessionType)) {
      // session was created not counting concurrent users, now switching to backend so they
      // should be counted
      dbSession.setLoginStatus(LoginHandler.SUCCESS_SESSION_STANDARD);
      OBDal.getInstance().flush();

      if (ActivationKey.getInstance().checkOPSLimitations(sessionId) == LicenseRestriction.NUMBER_OF_CONCURRENT_USERS_REACHED) {
        dbSession.setSessionActive(false);
        OBDal.getInstance().flush();

        OBError errMsg = new OBError();
        errMsg.setTitle(OBMessageUtils.messageBD("NUMBER_OF_CONCURRENT_USERS_REACHED_TITLE", false, true));
        errMsg.setMessage(OBMessageUtils.messageBD("NUMBER_OF_CONCURRENT_USERS_REACHED", false, true));
        currentSession.setAttribute("LOGINERRORMSG", errMsg);

        response.sendRedirect(authManager.getLoginURL(request));
        return;
      }
    }
  }
} catch (Exception e) {
  log.error("Error resetting login status for session "  + sessionId,e);
} finally {
  OBContext.restorePreviousMode();
}


boolean uncompSC = false;
String scDevModulePackage = "org.openbravo.userinterface.smartclient.dev";
OBContext.setAdminMode();
try {
  if (KernelUtils.getInstance().isModulePresent(scDevModulePackage)) {
    uncompSC = KernelUtils.getInstance().getModule(scDevModulePackage).isInDevelopment();
  }
} catch (Exception e) {
  log.error("Error trying to acquire module \"" + scDevModulePackage + "\": " + e.getMessage(), e);
} finally {
  OBContext.restorePreviousMode();
}

String ua = request.getHeader( "User-Agent" );
boolean isMSIE = ( ua != null && ua.indexOf( "MSIE" ) != -1 );
int verMSIE = 0;
String verMSIEtmp = "";
if (isMSIE) {
  verMSIEtmp = ua.substring(ua.indexOf("MSIE") + 5);
  verMSIEtmp = verMSIEtmp.substring(0, verMSIEtmp.indexOf("."));
  if (ua.indexOf("MSIE 7.0") != -1 && ua.indexOf("Trident/4") != -1) {
    //In case IE8 runs in "IE8 Compatibility mode, look for Trident/4.0 to know that is IE8 although MSIE string is MSIE 7.0
    verMSIEtmp = "8";
  } else if (ua.indexOf("MSIE 7.0") != -1 && ua.indexOf("Trident/5") != -1) {
    // In case IE9 runs in "IE8 Compatibility mode, look for Trident/5.0 to know that is IE9 although MSIE string is MSIE 7.0
    verMSIEtmp = "9";
  } else if (ua.indexOf("MSIE 7.0") != -1 && ua.indexOf("Trident/") != -1) {
    // For hypothetic future IE versions in case IEX runs in "IEX Compatibility mode, look for Trident/ to know that is IEX although MSIE string is MSIE 7.0
    verMSIEtmp = "10"; //If this 'if' statement is not updated, could be 10 or 11 or anything... but set 10 just to ensure it is not in IE7
  }
  verMSIE = Integer.parseInt(verMSIEtmp);
}
response.addHeader("Cache-Control", "no-cache, no-store, must-revalidate");
response.addHeader("Pragma", "no-cache");
response.addHeader("Expires", "0");

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("<html dir=\"");
      out.print((OBContext.isRightToLeft() ? "RTL" : "LTR"));
      out.write("\">\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Expires\" content=\"Tue, 24 Apr 1979 00:00:01 GMT\"/>\n");
      out.write("<meta http-equiv=\"Content-type\" content=\"text/html;charset=utf-8\"/>\n");
      out.write("<meta http-equiv=\"Cache-Control\" content=\"no-cache no-store must-revalidate\" >\n");
      out.write("<meta http-equiv=\"Pragma\" content=\"no-cache\" >\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("<meta name=\"author\" content=\"Openbravo S.L.U.\">\n");
      out.write("<meta name=\"keywords\" content=\"openbravo\">\n");
      out.write("<meta name=\"description\" content=\"Openbravo S.L.U.\">\n");
      out.write("<link rel=\"shortcut icon\" href=\"./web/images/favicon.ico\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./org.openbravo.client.kernel/OBCLKER_Kernel/StyleSheetResources?_appName=OB3&_skinVersion=Default&_cssDataUri=");
      out.print((!isMSIE || (isMSIE && verMSIE >=8)));
      out.write("\"/>\n");
      out.write("\n");
      out.write("<title>Openbravo</title>\n");

  ApplicationDictionaryCachedStructures adcs = WeldUtils.getInstanceFromStaticBeanManager(ApplicationDictionaryCachedStructures.class);
  if (!adcs.useCache()) {

      out.write("\n");
      out.write("<script src=\"./web/org.openbravo.client.kernel/js/scopeleaks.min.js\"></script>\n");

  }

      out.write("\n");
      out.write("<script src=\"./web/org.openbravo.client.kernel/js/LAB.min.js\"></script>\n");
      out.write("<script src=\"./web/org.openbravo.client.kernel/js/BigDecimal-all-1.0.1.min.js\"></script>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("  (function () {\n");
      out.write("    var b = document.documentElement;\n");
      out.write("    b.setAttribute('data-useragent',  navigator.userAgent);\n");
      out.write("    b.setAttribute('data-platform', navigator.platform );\n");
      out.write("    b.className += ((!!('ontouchstart' in window) || !!('onmsgesturechange' in window))?' touch':'');\n");
      out.write("  }());\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<!-- styles used during loading -->\n");
      out.write("<style>\n");
      out.write("  html, body {\n");
      out.write("      height: 100%;\n");
      out.write("      width: 100%;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  .OBCenteredBox {\n");
      out.write("      position: fixed;\n");
      out.write("      z-index: 1000000;\n");
      out.write("      top: 50%;\n");
      out.write("      left: 50%;\n");
      out.write("      margin: -25px 0 0 -150px;\n");
      out.write("      width: 300px;\n");
      out.write("      height: 50px;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  .OBLoadingPromptLabel {\n");
      out.write("      font-family: 'Arial';\n");
      out.write("      font-size: 12px;\n");
      out.write("      color: #ccd0d4;\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  .OBLoadingPromptModalMask {\n");
      out.write("      left: 0;\n");
      out.write("      top: 0;\n");
      out.write("      width: 100%;\n");
      out.write("      height: 100%;\n");
      out.write("      background-color: #7f7f7f;\n");
      out.write("  }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<!-- shows the loading div -->\n");
      out.write("<div class=\"OBLoadingPromptModalMask\" id=\"OBLoadingDiv\">\n");
      out.write("    <div class=\"OBCenteredBox\">\n");
      out.write("        <table>\n");
      out.write("            <tr>\n");
      out.write("                <td>\n");
      out.write("                    <span class=\"OBLoadingPromptLabel\">LOADING...</span>\n");
      out.write("                </td>\n");
      out.write("                <td>\n");
      out.write("                    <img width=\"220\" height=\"16\" src=\"./web/org.openbravo.userinterface.smartclient/openbravo/skins/Default/org.openbravo.client.application/images/system/windowLoading.gif\"/>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("        </table>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("<!-- load the rest -->\n");
      out.write("<script>\n");
      out.write("// Bootstrap error handling: Shows an alert to the user when an error occurs loading static resources\n");
      out.write("// This error handler gets removed at the end of static resources\n");
      out.write("window.onerror = function ");
      out.print(KernelConstants.BOOTSTRAP_ERROR_HANDLER_NAME);
      out.write(" (errorMsg, url, lineNumber) {\n");
      out.write("  var msg = errorMsg + ' - ' + url + ':' + lineNumber;\n");
      out.write("  document.body.removeChild(document.getElementById('OBLoadingDiv'));\n");
      out.write("  alert(msg);\n");
      out.write("};\n");
      out.write("\n");
      out.write("$LAB.setGlobalDefaults({AppendTo: 'body'});\n");
      out.write("\n");
      out.write("var isomorphicDir='./web/org.openbravo.userinterface.smartclient/isomorphic/';\n");
      out.write("var isc = window.isc ? window.isc : {};\n");
      out.write("\n");
      out.write("// starts the application is called as the last statement in the StaticResources part\n");
      out.write("function OBStartApplication() {\n");

//If the role has its access to the backend restricted, an error message will be shown
final VariablesSecureApp vars1 = new VariablesSecureApp(request, false);
OBContext.setAdminMode();
try{
  String roleId=vars1.getRole();
  Role role;
  if(roleId==null || roleId.equals("")){
    role=OBDal.getInstance().get(User.class, userId).getDefaultRole();
  }else{
    role = OBDal.getInstance().get(Role.class, vars1.getRole());
  }
if(role !=null && role.isRestrictbackend()){

      out.write("\n");
      out.write("  document.body.removeChild(document.getElementById('OBLoadingDiv'));\n");
      out.write("  isc.Dialog.create({message: OB.I18N.getLabel('OBUIAPP_RestrictedUser'), title: OB.I18N.getLabel('OBUIAPP_RestrictedUserTitle'), showCloseButton: false}).show();\n");
      out.write("  return;\n");

}
boolean onlySystemAdminAccess = "Y".equals(vars1.getSessionValue("onlySystemAdminRoleShouldBeAvailableInErp"));
if (onlySystemAdminAccess && role != null && !"0".equals(role.getId())) {
  
      out.write("\n");
      out.write("  document.body.removeChild(document.getElementById('OBLoadingDiv'));\n");
      out.write("  isc.Dialog.create({message: OB.I18N.getLabel('BACKEND_LOGIN_RESTRICTED'), title: OB.I18N.getLabel('BACKEND_LOGIN_RESTRICTED_TITLE'), showCloseButton: false}).show();\n");
      out.write("  return;\n");
  
}
 }finally{
  OBContext.restorePreviousMode();
}

      out.write("\n");
      out.write("  OB.Layout.initialize();\n");
      out.write("  OB.Layout.draw();\n");
      out.write("  OB.Layout.ViewManager.createAddStartTab();\n");
      out.write("  // get rid of the loading stuff\n");
      out.write("  document.body.removeChild(document.getElementById('OBLoadingDiv'));\n");
      out.write("  OB.GlobalHiddenForm = document.forms.OBGlobalHiddenForm;\n");

  if (currentSession.getAttribute("STARTUP-MESSAGE") != null) {
    String text = (String) currentSession.getAttribute("STARTUP-MESSAGE");
    String title = (String) currentSession.getAttribute("STARTUP-MESSAGE-TITLE");
    currentSession.removeAttribute("STARTUP-MESSAGE");
    currentSession.removeAttribute("STARTUP-MESSAGE-TITLE");

      out.write("\n");
      out.write("  isc.say('");
      out.print(text);
      out.write("', null, {title: '");
      out.print(title);
      out.write("'});\n");

  }

      out.write("\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("<script src=\"./web/org.openbravo.userinterface.smartclient/isomorphic/ISC_Combined");
      out.print((uncompSC ? ".uncompressed" : ""));
      out.write(".js\"></script>\n");
      out.write("<script src=\"./web/org.openbravo.userinterface.smartclient/isomorphic/ISC_History");
      out.print((uncompSC ? ".uncompressed" : ""));
      out.write(".js\"></script>\n");

  StaticResourceProvider resourceProvider = WeldUtils.getInstanceFromStaticBeanManager(StaticResourceProvider.class);
  final String staticResourceFileName = resourceProvider.getStaticResourceCachedFileName("OB3");
  if (staticResourceFileName != null) {

      out.write("\n");
      out.write("<script src=\"./web/js/gen/");
      out.print(staticResourceFileName);
      out.write(".js\"></script>\n");

  } else {

      out.write("\n");
      out.write("<script src=\"./org.openbravo.client.kernel/OBCLKER_Kernel/StaticResources?_appName=OB3&_skinVersion=Default\"></script>\n");

  }

      out.write("\n");
      out.write("<iframe name=\"background_target\" id=\"background_target\" height=\"0\" width=\"0\"></iframe>\n");
      out.write("<form name=\"OBGlobalHiddenForm\" method=\"post\" action=\"blank.html\" target=\"background_target\">\n");
      out.write("</form>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
